# looking for dead code
DEAD: output sum[string] of int;

cur_file: string;
cur_method: string;
s: stack of bool;
alive := true;

visit(input, visitor {
before _ -> if (!alive) stop;
before node: CodeRepository -> {
snapshot := getsnapshot(node);
foreach (i: int; def(snapshot[i]))
visit(snapshot[i]);
stop;
}
before node: ChangedFile -> cur_file = string(node);
before node: Method -> {
    cur_method = node.name;
    push(s, alive);
    alive = true;
}
after node: Method -> alive = pop(s);
before node: Statement -> {
if (!alive) {
DEAD[format("%s - %s", cur_file, cur_method)] << 1;
stop;
}
switch (node.kind) {
        case StatementKind.BREAK: if (def(node.expression)) break;
    case StatementKind.RETURN, StatementKind.THROW, StatementKind.CONTINUE:
    alive = false;
    break;
    case StatementKind.IF, StatementKind.LABEL: stop;
    case StatementKind.FOR, StatementKind.DO, StatementKind.WHILE,
            StatementKind.SWITCH, StatementKind.TRY:
        foreach (i: int; def(node.statements[i])) {
                    push(s, alive);
                    visit(node.statements[i]);
                    alive = pop(s);
        }
    stop;
    default:
    break;
}
}
});